# Dad's First Step Project Rules

## Project Overview
Dad's First Step is a supportive platform designed to guide new fathers through their parenting journey.

## Core Values
1. **User-Centric**: Every feature must prioritize the needs and experiences of new fathers
2. **Accessibility**: Content and features must be easily accessible and understandable
3. **Privacy-First**: Handle all user data with utmost security and respect
4. **Reliability**: Ensure consistent and dependable functionality

## Technical Standards

### 1. Architecture
- Follow Next.js 13+ App Router conventions
- Implement feature-based folder structure
- Keep components atomic and reusable
- Use Server Components by default, Client Components only when necessary

### 2. State Management
- Use Zustand for global state management
- Keep stores atomic and focused
- Implement proper state persistence strategies
- Use React Query for server state management

### 3. Firebase Integration
- Follow Firebase best practices for authentication
- Implement proper security rules
- Use batch operations for multiple document updates
- Implement offline persistence

### 4. TypeScript Usage
- Maintain 100% TypeScript coverage
- Define explicit interfaces for all data structures
- Use strict type checking
- Avoid any type unless absolutely necessary

### 5. Styling
- Use Tailwind CSS for all styling
- Follow mobile-first approach
- Maintain consistent spacing and color schemes
- Use CSS variables for theme values

## Feature-Specific Rules

### 1. Authentication
- Implement secure OAuth flows
- Handle authentication errors gracefully
- Maintain persistent sessions
- Clear security logging

### 2. Milestone Tracking
- Support customizable milestones
- Implement progress visualization
- Enable milestone sharing
- Maintain milestone history

### 3. Weekly Playbook
- Ensure content is age-appropriate
- Support offline access
- Enable content bookmarking
- Implement progress tracking

### 4. Bonding Activities
- Categorize activities by age and type
- Include difficulty levels
- Support activity scheduling
- Enable activity completion tracking

### 5. Customizable Checklists
- Support template-based checklists
- Enable checklist sharing
- Implement recurring items
- Support priority levels

## Testing Requirements
- Maintain minimum 80% test coverage
- Write unit tests for all utilities
- Implement integration tests for core flows
- Use React Testing Library for component tests
- Include accessibility tests

## Performance Standards
- Achieve 90+ Lighthouse scores
- Implement proper code splitting
- Optimize image loading
- Monitor and optimize Firebase usage
- Implement proper caching strategies

## Security Guidelines
- Regular security audits
- Proper error handling
- Input validation
- Rate limiting
- Data encryption at rest

## Accessibility Requirements
- WCAG 2.1 AA compliance
- Proper ARIA attributes
- Keyboard navigation
- Screen reader compatibility
- Color contrast compliance

## Documentation
- Maintain up-to-date README
- Document all APIs
- Include setup instructions
- Document deployment procedures
- Keep change log updated

## Git Workflow
- Use conventional commits
- Create feature branches
- Require pull request reviews
- Maintain clean commit history
- Use semantic versioning

## Deployment
- Automated deployment pipeline
- Environment-specific configurations
- Backup strategies
- Monitoring setup
- Error tracking

## Content Guidelines
- Use inclusive language
- Maintain consistent tone
- Age-appropriate content
- Evidence-based information
- Regular content reviews

Remember: These rules are living guidelines and should be updated as the project evolves.
